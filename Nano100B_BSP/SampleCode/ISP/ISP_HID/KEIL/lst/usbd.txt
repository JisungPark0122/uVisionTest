; generated by Component: ARM Compiler 5.99 update 4 (build 402) Tool: ArmCC [5b6802]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --feedback=.\obj\NANO100B_ISP_HID_PB15.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\usbd.crf ..\..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;483     */
;;;484    void USBD_CtrlIn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
;;;486        if(g_usbd_CtrlInSize)
000002  4c1f              LDR      r4,|L1.128|
000004  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlInSize
000006  2800              CMP      r0,#0
000008  d020              BEQ      |L1.76|
;;;487        {
;;;488            // Process remained data
;;;489            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
00000a  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlInSize
00000c  69e1              LDR      r1,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;490            {
;;;491                // Data size > MXPLD
;;;492                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
;;;493                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
;;;494                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;495                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;496            }
;;;497            else
;;;498            {
;;;499                // Data size <= MXPLD
;;;500                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
00000e  4d1d              LDR      r5,|L1.132|
000010  4288              CMP      r0,r1                 ;489
000012  6a28              LDR      r0,[r5,#0x20]
000014  491c              LDR      r1,|L1.136|
000016  d90e              BLS      |L1.54|
000018  69e2              LDR      r2,[r4,#0x1c]         ;492  ; g_usbd_CtrlMaxPktSize
00001a  1840              ADDS     r0,r0,r1              ;492
00001c  6861              LDR      r1,[r4,#4]            ;492  ; g_usbd_CtrlInPointer
00001e  f7fffffe          BL       USBD_MemCopy
000022  69e0              LDR      r0,[r4,#0x1c]         ;493  ; g_usbd_CtrlMaxPktSize
000024  6268              STR      r0,[r5,#0x24]         ;493
000026  69e1              LDR      r1,[r4,#0x1c]         ;494  ; g_usbd_CtrlMaxPktSize
000028  6860              LDR      r0,[r4,#4]            ;494  ; g_usbd_CtrlInPointer
00002a  1840              ADDS     r0,r0,r1              ;494
00002c  6060              STR      r0,[r4,#4]            ;495  ; g_usbd_CtrlInPointer
00002e  68a0              LDR      r0,[r4,#8]            ;495  ; g_usbd_CtrlInSize
000030  69e1              LDR      r1,[r4,#0x1c]         ;495  ; g_usbd_CtrlMaxPktSize
000032  1a40              SUBS     r0,r0,r1              ;495
000034  e008              B        |L1.72|
                  |L1.54|
000036  68a2              LDR      r2,[r4,#8]  ; g_usbd_CtrlInSize
000038  1840              ADDS     r0,r0,r1
00003a  6861              LDR      r1,[r4,#4]  ; g_usbd_CtrlInPointer
00003c  f7fffffe          BL       USBD_MemCopy
;;;501                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
000040  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlInSize
000042  6268              STR      r0,[r5,#0x24]
;;;502                g_usbd_CtrlInPointer = 0;
000044  2000              MOVS     r0,#0
000046  6060              STR      r0,[r4,#4]  ; g_usbd_CtrlInPointer
                  |L1.72|
;;;503                g_usbd_CtrlInSize = 0;
000048  60a0              STR      r0,[r4,#8]  ; g_usbd_CtrlInSize
                  |L1.74|
;;;504            }
;;;505        }
;;;506        else
;;;507        {
;;;508            // In ACK for Set address
;;;509            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;510            {
;;;511                if((USBD_GET_ADDR() != g_usbd_UsbAddr) && (USBD_GET_ADDR() == 0))
;;;512                {
;;;513                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;514                }
;;;515            }
;;;516    
;;;517            /* For the case of data size is integral times maximum packet size */
;;;518            if(g_usbd_CtrlInZeroFlag)
;;;519            {
;;;520                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;521                g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
;;;522            }
;;;523        }
;;;524    }
00004a  bd70              POP      {r4-r6,pc}
                  |L1.76|
00004c  480c              LDR      r0,|L1.128|
00004e  3044              ADDS     r0,r0,#0x44           ;509
000050  7801              LDRB     r1,[r0,#0]            ;509  ; g_usbd_SetupPacket
000052  2900              CMP      r1,#0                 ;509
000054  d10c              BNE      |L1.112|
000056  7840              LDRB     r0,[r0,#1]            ;509  ; g_usbd_SetupPacket
000058  2805              CMP      r0,#5                 ;509
00005a  d109              BNE      |L1.112|
00005c  4809              LDR      r0,|L1.132|
00005e  6901              LDR      r1,[r0,#0x10]         ;511
000060  69a2              LDR      r2,[r4,#0x18]         ;511  ; g_usbd_UsbAddr
000062  4291              CMP      r1,r2                 ;511
000064  d004              BEQ      |L1.112|
000066  6901              LDR      r1,[r0,#0x10]         ;511
000068  2900              CMP      r1,#0                 ;511
00006a  d101              BNE      |L1.112|
00006c  69a1              LDR      r1,[r4,#0x18]         ;513  ; g_usbd_UsbAddr
00006e  6101              STR      r1,[r0,#0x10]         ;513
                  |L1.112|
000070  7860              LDRB     r0,[r4,#1]            ;518  ; g_usbd_CtrlInZeroFlag
000072  2800              CMP      r0,#0                 ;518
000074  d0e9              BEQ      |L1.74|
000076  4903              LDR      r1,|L1.132|
000078  2000              MOVS     r0,#0                 ;520
00007a  6248              STR      r0,[r1,#0x24]         ;520
00007c  7060              STRB     r0,[r4,#1]            ;521
00007e  bd70              POP      {r4-r6,pc}
;;;525    
                          ENDP

                  |L1.128|
                          DCD      ||.data||
                  |L1.132|
                          DCD      0x40060000
                  |L1.136|
                          DCD      0x40060100

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;552     */
;;;553    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;554    {
;;;555        uint32_t u32Size;
;;;556    
;;;557        if (g_usbd_CtrlOutToggle != (USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk))
000002  4811              LDR      r0,|L2.72|
000004  6942              LDR      r2,[r0,#0x14]
000006  4c11              LDR      r4,|L2.76|
000008  210f              MOVS     r1,#0xf
00000a  0309              LSLS     r1,r1,#12
00000c  6a63              LDR      r3,[r4,#0x24]  ; g_usbd_CtrlOutToggle
00000e  400a              ANDS     r2,r2,r1
000010  429a              CMP      r2,r3
000012  d015              BEQ      |L2.64|
;;;558        {
;;;559            g_usbd_CtrlOutToggle = USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk;
000014  6942              LDR      r2,[r0,#0x14]
000016  400a              ANDS     r2,r2,r1
000018  6262              STR      r2,[r4,#0x24]  ; g_usbd_CtrlOutToggle
;;;560            if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
00001a  6921              LDR      r1,[r4,#0x10]  ; g_usbd_CtrlOutSize
00001c  6962              LDR      r2,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
00001e  4291              CMP      r1,r2
000020  d20d              BCS      |L2.62|
;;;561            {
;;;562                u32Size = USBD_GET_PAYLOAD_LEN(EP1);
000022  6b45              LDR      r5,[r0,#0x34]
;;;563                USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1), u32Size);
000024  6b00              LDR      r0,[r0,#0x30]
000026  490a              LDR      r1,|L2.80|
000028  462a              MOV      r2,r5
00002a  1841              ADDS     r1,r0,r1
00002c  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
00002e  f7fffffe          BL       USBD_MemCopy
;;;564                g_usbd_CtrlOutPointer += u32Size;
000032  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000034  1940              ADDS     r0,r0,r5
;;;565                g_usbd_CtrlOutSize += u32Size;
000036  60e0              STR      r0,[r4,#0xc]  ; g_usbd_CtrlOutPointer
000038  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
00003a  1940              ADDS     r0,r0,r5
00003c  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
                  |L2.62|
;;;566            }
;;;567        }
;;;568        else
;;;569        {
;;;570            USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
;;;571        }
;;;572    }
00003e  bd70              POP      {r4-r6,pc}
                  |L2.64|
000040  69e1              LDR      r1,[r4,#0x1c]         ;570  ; g_usbd_CtrlMaxPktSize
000042  6341              STR      r1,[r0,#0x34]         ;570
000044  bd70              POP      {r4-r6,pc}
;;;573    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      0x40060000
                  |L2.76|
                          DCD      ||.data||
                  |L2.80|
                          DCD      0x40060100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;157     */
;;;158    void USBD_GetDescriptor(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;159    {
;;;160        uint32_t u32Len;
;;;161    
;;;162        g_usbd_CtrlInZeroFlag = (uint8_t)0ul;
000002  4e36              LDR      r6,|L3.220|
000004  2000              MOVS     r0,#0
000006  7070              STRB     r0,[r6,#1]
;;;163        u32Len = 0;
;;;164        u32Len = g_usbd_SetupPacket[7];
000008  4632              MOV      r2,r6
00000a  3244              ADDS     r2,r2,#0x44
00000c  79d0              LDRB     r0,[r2,#7]  ; g_usbd_SetupPacket
;;;165        u32Len <<= 8;
;;;166        u32Len += g_usbd_SetupPacket[6];
00000e  7991              LDRB     r1,[r2,#6]  ; g_usbd_SetupPacket
000010  0200              LSLS     r0,r0,#8              ;165
000012  180c              ADDS     r4,r1,r0
;;;167    
;;;168        switch (g_usbd_SetupPacket[3])
000014  78d0              LDRB     r0,[r2,#3]  ; g_usbd_SetupPacket
000016  2803              CMP      r0,#3
000018  d044              BEQ      |L3.164|
00001a  dc04              BGT      |L3.38|
00001c  2801              CMP      r0,#1
00001e  d007              BEQ      |L3.48|
000020  2802              CMP      r0,#2
000022  d152              BNE      |L3.202|
000024  e00b              B        |L3.62|
                  |L3.38|
000026  2821              CMP      r0,#0x21
000028  d017              BEQ      |L3.90|
00002a  2822              CMP      r0,#0x22
00002c  d14d              BNE      |L3.202|
00002e  e020              B        |L3.114|
                  |L3.48|
;;;169        {
;;;170        // Get Device Descriptor
;;;171        case DESC_DEVICE:
;;;172        {
;;;173            u32Len = Minimum(u32Len, LEN_DEVICE);
000030  2c12              CMP      r4,#0x12
000032  d300              BCC      |L3.54|
000034  2412              MOVS     r4,#0x12
                  |L3.54|
;;;174            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
000036  6c30              LDR      r0,[r6,#0x40]  ; g_usbd_sInfo
000038  4621              MOV      r1,r4                 ;173
00003a  6800              LDR      r0,[r0,#0]
;;;175            USBD_PrepareCtrlOut(0,0);
;;;176            break;
00003c  e02b              B        |L3.150|
                  |L3.62|
;;;177        }
;;;178        // Get Configuration Descriptor
;;;179        case DESC_CONFIG:
;;;180        {
;;;181            uint32_t u32TotalLen;
;;;182    
;;;183            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
00003e  6c30              LDR      r0,[r6,#0x40]  ; g_usbd_sInfo
000040  6845              LDR      r5,[r0,#4]
000042  78e8              LDRB     r0,[r5,#3]
;;;184            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
000044  78a9              LDRB     r1,[r5,#2]
000046  0200              LSLS     r0,r0,#8
000048  1808              ADDS     r0,r1,r0
;;;185    
;;;186            if (u32Len > u32TotalLen)
00004a  4284              CMP      r4,r0
00004c  d93a              BLS      |L3.196|
;;;187            {
;;;188                u32Len = u32TotalLen;
00004e  4604              MOV      r4,r0
;;;189                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
000050  69f1              LDR      r1,[r6,#0x1c]  ; g_usbd_CtrlMaxPktSize
000052  e033              B        |L3.188|
                  |L3.84|
;;;190                {
;;;191                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
000054  2001              MOVS     r0,#1
000056  7070              STRB     r0,[r6,#1]
000058  e034              B        |L3.196|
                  |L3.90|
;;;192                }
;;;193            }
;;;194            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;195            USBD_PrepareCtrlOut(0,0);
;;;196            break;
;;;197        }
;;;198        // Get HID Descriptor
;;;199        case DESC_HID:
;;;200        {
;;;201            /* CV3.0 HID Class Descriptor Test,
;;;202               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;203            uint32_t u32ConfigDescOffset;   // u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index)
;;;204            u32Len = Minimum(u32Len, LEN_HID);
00005a  2c09              CMP      r4,#9
00005c  d300              BCC      |L3.96|
00005e  2409              MOVS     r4,#9
                  |L3.96|
;;;205            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
000060  6c30              LDR      r0,[r6,#0x40]  ; g_usbd_sInfo
000062  7912              LDRB     r2,[r2,#4]  ; g_usbd_SetupPacket
000064  6943              LDR      r3,[r0,#0x14]
000066  0092              LSLS     r2,r2,#2
000068  589a              LDR      r2,[r3,r2]
;;;206            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
00006a  6840              LDR      r0,[r0,#4]
00006c  4621              MOV      r1,r4                 ;204
00006e  1880              ADDS     r0,r0,r2
;;;207            USBD_PrepareCtrlOut(0,0);
;;;208            break;
000070  e011              B        |L3.150|
                  |L3.114|
;;;209        }
;;;210        // Get Report Descriptor
;;;211        case DESC_HID_RPT:
;;;212        {
;;;213            if (u32Len > g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]])
000072  6c37              LDR      r7,[r6,#0x40]  ; g_usbd_sInfo
000074  7911              LDRB     r1,[r2,#4]  ; g_usbd_SetupPacket
000076  6938              LDR      r0,[r7,#0x10]
000078  008d              LSLS     r5,r1,#2
00007a  5940              LDR      r0,[r0,r5]
00007c  42a0              CMP      r0,r4
00007e  d207              BCS      |L3.144|
;;;214            {
;;;215                u32Len = g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]];
000080  4604              MOV      r4,r0
;;;216                if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
000082  69f1              LDR      r1,[r6,#0x1c]  ; g_usbd_CtrlMaxPktSize
000084  f7fffffe          BL       __aeabi_uidivmod
000088  2900              CMP      r1,#0
00008a  d101              BNE      |L3.144|
;;;217                {
;;;218                    g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
00008c  2001              MOVS     r0,#1
00008e  7070              STRB     r0,[r6,#1]
                  |L3.144|
;;;219                }
;;;220            }
;;;221            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
000090  68f8              LDR      r0,[r7,#0xc]
000092  4621              MOV      r1,r4
000094  5940              LDR      r0,[r0,r5]
                  |L3.150|
000096  f7fffffe          BL       USBD_PrepareCtrlIn
;;;222            USBD_PrepareCtrlOut(0,0);
00009a  2100              MOVS     r1,#0
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       USBD_PrepareCtrlOut
;;;223            break;
;;;224        }
;;;225        // Get String Descriptor
;;;226        case DESC_STRING:
;;;227        {
;;;228            // Get String Descriptor
;;;229            if(g_usbd_SetupPacket[2] < 4)
;;;230            {
;;;231                if (u32Len > g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0])
;;;232                {
;;;233                    u32Len = g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0];
;;;234                    if ((u32Len % g_usbd_CtrlMaxPktSize) == 0ul)
;;;235                    {
;;;236                        g_usbd_CtrlInZeroFlag = (uint8_t)1ul;
;;;237                    }
;;;238                }
;;;239                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
;;;240                USBD_PrepareCtrlOut(0, 0);
;;;241            }
;;;242            else
;;;243            {
;;;244                // Not support. Reply STALL.
;;;245                USBD_SET_EP_STALL(EP0);
;;;246                USBD_SET_EP_STALL(EP1);
;;;247            }
;;;248            break;
;;;249        }
;;;250        default:
;;;251            // Not support. Reply STALL.
;;;252            USBD_SET_EP_STALL(EP0);
;;;253            USBD_SET_EP_STALL(EP1);
;;;254            break;
;;;255        }
;;;256    }
0000a2  bdf8              POP      {r3-r7,pc}
                  |L3.164|
0000a4  7890              LDRB     r0,[r2,#2]            ;229  ; g_usbd_SetupPacket
0000a6  2804              CMP      r0,#4                 ;229
0000a8  d20f              BCS      |L3.202|
0000aa  6c31              LDR      r1,[r6,#0x40]         ;231  ; g_usbd_sInfo
0000ac  0080              LSLS     r0,r0,#2              ;231
0000ae  6889              LDR      r1,[r1,#8]            ;231
0000b0  580d              LDR      r5,[r1,r0]            ;231
0000b2  7828              LDRB     r0,[r5,#0]            ;231
0000b4  42a0              CMP      r0,r4                 ;231
0000b6  d205              BCS      |L3.196|
0000b8  4604              MOV      r4,r0                 ;233
0000ba  69f1              LDR      r1,[r6,#0x1c]         ;234  ; g_usbd_CtrlMaxPktSize
                  |L3.188|
0000bc  f7fffffe          BL       __aeabi_uidivmod
0000c0  2900              CMP      r1,#0                 ;189
0000c2  d0c7              BEQ      |L3.84|
                  |L3.196|
0000c4  4621              MOV      r1,r4                 ;239
0000c6  4628              MOV      r0,r5                 ;239
0000c8  e7e5              B        |L3.150|
                  |L3.202|
0000ca  4805              LDR      r0,|L3.224|
0000cc  6a82              LDR      r2,[r0,#0x28]         ;252
0000ce  1541              ASRS     r1,r0,#21             ;252
0000d0  430a              ORRS     r2,r2,r1              ;252
0000d2  6282              STR      r2,[r0,#0x28]         ;252
0000d4  6b82              LDR      r2,[r0,#0x38]         ;253
0000d6  430a              ORRS     r2,r2,r1              ;253
0000d8  6382              STR      r2,[r0,#0x38]         ;253
0000da  bdf8              POP      {r3-r7,pc}
;;;257    
                          ENDP

                  |L3.220|
                          DCD      ||.data||
                  |L3.224|
                          DCD      0x40060000

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;95      */
;;;96     void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;97     {
;;;98         USBD_MemCopy(buf, g_usbd_SetupPacket, 8);
000002  2208              MOVS     r2,#8
000004  4901              LDR      r1,|L4.12|
000006  f7fffffe          BL       USBD_MemCopy
;;;99     }
00000a  bd10              POP      {r4,pc}
;;;100    
                          ENDP

                  |L4.12|
                          DCD      ||.data||+0x44

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;630    
;;;631    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;632    {
;;;633        g_u32EpStallLock = u32EpBitmap;
000002  63c8              STR      r0,[r1,#0x3c]  ; g_u32EpStallLock
;;;634    }
000004  4770              BX       lr
;;;635    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;393      */
;;;394    static __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
000000  e003              B        |L6.10|
                  |L6.2|
;;;395    {
;;;396        while (size--) *dest++ = *src++;
000002  780b              LDRB     r3,[r1,#0]
000004  7003              STRB     r3,[r0,#0]
000006  1c40              ADDS     r0,r0,#1
000008  1c49              ADDS     r1,r1,#1
                  |L6.10|
00000a  1e52              SUBS     r2,r2,#1
00000c  d2f9              BCS      |L6.2|
;;;397    }
00000e  4770              BX       lr
;;;398    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;53       */
;;;54     void USBD_Open(S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b0a              LDR      r3,|L7.44|
;;;55     {
;;;56         g_usbd_sInfo = param;
;;;57         g_usbd_pfnClassRequest = pfnClassReq;
;;;58         g_usbd_pfnSetInterface = pfnSetInterface;
;;;59     
;;;60         /* get EP0 maximum packet size */
;;;61         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000002  635a              STR      r2,[r3,#0x34]  ; g_usbd_pfnSetInterface
000004  6319              STR      r1,[r3,#0x30]  ; g_usbd_pfnClassRequest
000006  6418              STR      r0,[r3,#0x40]  ; g_usbd_sInfo
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  61d8              STR      r0,[r3,#0x1c]  ; g_usbd_CtrlMaxPktSize
;;;62     
;;;63         /* Initial USB engine */
;;;64         USBD->CTL = 0x29f;
00000e  4809              LDR      r0,|L7.52|
000010  4907              LDR      r1,|L7.48|
000012  6001              STR      r1,[r0,#0]
;;;65         USBD->PDMA |= USBD_PDMA_BYTEM_Msk;
000014  4907              LDR      r1,|L7.52|
000016  3180              ADDS     r1,r1,#0x80
000018  6a4a              LDR      r2,[r1,#0x24]
00001a  2304              MOVS     r3,#4
00001c  431a              ORRS     r2,r2,r3
00001e  624a              STR      r2,[r1,#0x24]
;;;66         /* Force SE0, and then clear it to connect*/
;;;67         USBD_SET_SE0();
000020  6801              LDR      r1,[r0,#0]
000022  2210              MOVS     r2,#0x10
000024  4311              ORRS     r1,r1,r2
000026  6001              STR      r1,[r0,#0]
;;;68     }
000028  4770              BX       lr
;;;69     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.data||
                  |L7.48|
                          DCD      0x0000029f
                  |L7.52|
                          DCD      0x40060000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;452     */
;;;453    void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;454    {
;;;455        if(u32Size > g_usbd_CtrlMaxPktSize)
000002  4c16              LDR      r4,|L8.92|
000004  460d              MOV      r5,r1                 ;454
000006  69e1              LDR      r1,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
000008  428d              CMP      r5,r1
00000a  d915              BLS      |L8.56|
;;;456        {
;;;457            // Data size > MXPLD
;;;458            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
00000c  69e1              LDR      r1,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
00000e  1841              ADDS     r1,r0,r1
;;;459            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
000010  6061              STR      r1,[r4,#4]  ; g_usbd_CtrlInPointer
000012  69e1              LDR      r1,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
000014  1a69              SUBS     r1,r5,r1
000016  60a1              STR      r1,[r4,#8]  ; g_usbd_CtrlInSize
;;;460            USBD_SET_DATA1(EP0);
000018  4d11              LDR      r5,|L8.96|
00001a  6aa9              LDR      r1,[r5,#0x28]
00001c  2280              MOVS     r2,#0x80
00001e  4311              ORRS     r1,r1,r2
000020  62a9              STR      r1,[r5,#0x28]
;;;461            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, g_usbd_CtrlMaxPktSize);
000022  6a29              LDR      r1,[r5,#0x20]
000024  4a0f              LDR      r2,|L8.100|
000026  188b              ADDS     r3,r1,r2
000028  69e2              LDR      r2,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
00002a  4601              MOV      r1,r0
00002c  4618              MOV      r0,r3
00002e  f7fffffe          BL       USBD_MemCopy
;;;462            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000032  69e0              LDR      r0,[r4,#0x1c]  ; g_usbd_CtrlMaxPktSize
000034  6268              STR      r0,[r5,#0x24]
;;;463        }
;;;464        else
;;;465        {
;;;466            // Data size <= MXPLD
;;;467            g_usbd_CtrlInPointer = 0;
;;;468            g_usbd_CtrlInSize = 0;
;;;469            USBD_SET_DATA1(EP0);
;;;470            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, u32Size);
;;;471            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;472        }
;;;473    }
000036  bd70              POP      {r4-r6,pc}
                  |L8.56|
000038  2100              MOVS     r1,#0                 ;467
00003a  6061              STR      r1,[r4,#4]            ;468  ; g_usbd_CtrlInPointer
00003c  60a1              STR      r1,[r4,#8]            ;468  ; g_usbd_CtrlInSize
00003e  4c08              LDR      r4,|L8.96|
000040  6aa1              LDR      r1,[r4,#0x28]         ;469
000042  2280              MOVS     r2,#0x80              ;469
000044  4311              ORRS     r1,r1,r2              ;469
000046  62a1              STR      r1,[r4,#0x28]         ;469
000048  6a21              LDR      r1,[r4,#0x20]         ;470
00004a  4a06              LDR      r2,|L8.100|
00004c  188b              ADDS     r3,r1,r2              ;470
00004e  4601              MOV      r1,r0                 ;470
000050  462a              MOV      r2,r5                 ;470
000052  4618              MOV      r0,r3                 ;470
000054  f7fffffe          BL       USBD_MemCopy
000058  6265              STR      r5,[r4,#0x24]         ;471
00005a  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP

                  |L8.92|
                          DCD      ||.data||
                  |L8.96|
                          DCD      0x40060000
                  |L8.100|
                          DCD      0x40060100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;535     */
;;;536    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;537    {
;;;538        g_usbd_CtrlOutPointer = pu8Buf;
;;;539        g_usbd_CtrlOutSize = 0;
000002  60d0              STR      r0,[r2,#0xc]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;540        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;541        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  69d0              LDR      r0,[r2,#0x1c]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6348              STR      r0,[r1,#0x34]
;;;542    }
000010  4770              BX       lr
;;;543    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x40060000

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;109     */
;;;110    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112        g_usbd_CtrlOutToggle = 0;
000002  4c13              LDR      r4,|L10.80|
000004  2000              MOVS     r0,#0
000006  6260              STR      r0,[r4,#0x24]  ; g_usbd_CtrlOutToggle
;;;113        // Setup packet process
;;;114        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8);
000008  4620              MOV      r0,r4
00000a  2208              MOVS     r2,#8
00000c  4911              LDR      r1,|L10.84|
00000e  3044              ADDS     r0,r0,#0x44
000010  f7fffffe          BL       USBD_MemCopy
;;;115    
;;;116        switch (g_usbd_SetupPacket[0] & 0x60)   /* request type */
000014  4620              MOV      r0,r4
000016  3044              ADDS     r0,r0,#0x44
000018  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
00001a  2160              MOVS     r1,#0x60
00001c  4008              ANDS     r0,r0,r1
00001e  d00c              BEQ      |L10.58|
000020  2820              CMP      r0,#0x20
000022  d00d              BEQ      |L10.64|
000024  2840              CMP      r0,#0x40
000026  d00f              BEQ      |L10.72|
;;;117        {
;;;118        case REQ_STANDARD:   // Standard
;;;119        {
;;;120            USBD_StandardRequest();
;;;121            break;
;;;122        }
;;;123        case REQ_CLASS:   // Class
;;;124        {
;;;125            if (g_usbd_pfnClassRequest != NULL)
;;;126            {
;;;127                g_usbd_pfnClassRequest();
;;;128            }
;;;129            break;
;;;130        }
;;;131        case REQ_VENDOR:   // Vendor
;;;132        {
;;;133            if (g_usbd_pfnVendorRequest != NULL)
;;;134            {
;;;135                g_usbd_pfnVendorRequest();
;;;136            }
;;;137            break;
;;;138        }
;;;139        default:   // reserved
;;;140        {
;;;141            /* Setup error, stall the device */
;;;142            USBD_SET_EP_STALL(EP0);
000028  480b              LDR      r0,|L10.88|
00002a  6a82              LDR      r2,[r0,#0x28]
00002c  1541              ASRS     r1,r0,#21
00002e  430a              ORRS     r2,r2,r1
000030  6282              STR      r2,[r0,#0x28]
;;;143            USBD_SET_EP_STALL(EP1);
000032  6b82              LDR      r2,[r0,#0x38]
000034  430a              ORRS     r2,r2,r1
000036  6382              STR      r2,[r0,#0x38]
;;;144            break;
;;;145        }
;;;146        }
;;;147    }
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  f7fffffe          BL       USBD_StandardRequest
00003e  bd10              POP      {r4,pc}
                  |L10.64|
000040  6b20              LDR      r0,[r4,#0x30]         ;125  ; g_usbd_pfnClassRequest
000042  e002              B        |L10.74|
                  |L10.68|
000044  4780              BLX      r0                    ;127
000046  bd10              POP      {r4,pc}
                  |L10.72|
000048  6ae0              LDR      r0,[r4,#0x2c]         ;133  ; g_usbd_pfnVendorRequest
                  |L10.74|
00004a  2800              CMP      r0,#0                 ;125
00004c  d1fa              BNE      |L10.68|
00004e  bd10              POP      {r4,pc}
;;;148    
                          ENDP

                  |L10.80|
                          DCD      ||.data||
                  |L10.84|
                          DCD      0x40060100
                  |L10.88|
                          DCD      0x40060000

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;625     */
;;;626    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;627    {
;;;628        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6388              STR      r0,[r1,#0x38]  ; g_usbd_pfnSetConfigCallback
;;;629    }
000004  4770              BX       lr
;;;630    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;612     */
;;;613    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;614    {
;;;615        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  62c8              STR      r0,[r1,#0x2c]  ; g_usbd_pfnVendorRequest
;;;616    }
000004  4770              BX       lr
;;;617    /**
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;266     */
;;;267    void USBD_StandardRequest(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;268    {
;;;269        /* clear global variables for new request */
;;;270        g_usbd_CtrlInPointer = 0;
000002  4d75              LDR      r5,|L13.472|
000004  2400              MOVS     r4,#0
;;;271        g_usbd_CtrlInSize = 0;
000006  606c              STR      r4,[r5,#4]  ; g_usbd_CtrlInPointer
000008  60ac              STR      r4,[r5,#8]  ; g_usbd_CtrlInSize
;;;272    
;;;273        if (g_usbd_SetupPacket[0] & 0x80)   /* request data transfer direction */
00000a  462a              MOV      r2,r5
00000c  3244              ADDS     r2,r2,#0x44
00000e  7811              LDRB     r1,[r2,#0]  ; g_usbd_SetupPacket
000010  0608              LSLS     r0,r1,#24
;;;274        {
;;;275            // Device to host
;;;276            switch (g_usbd_SetupPacket[1])
;;;277            {
;;;278            case GET_CONFIGURATION:
;;;279            {
;;;280                // Return current configuration setting
;;;281                /* Data stage */
;;;282                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbConfig;
;;;283                USBD_SET_DATA1(EP0);
;;;284                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;285                /* Status stage */
;;;286                USBD_PrepareCtrlOut(0,0);
;;;287                break;
;;;288            }
;;;289            case GET_DESCRIPTOR:
;;;290            {
;;;291                USBD_GetDescriptor();
;;;292                break;
;;;293            }
;;;294            case GET_INTERFACE:
;;;295            {
;;;296                // Return current interface setting
;;;297                /* Data stage */
;;;298                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbAltInterface;
;;;299                USBD_SET_DATA1(EP0);
;;;300                USBD_SET_PAYLOAD_LEN(EP0, 1);
;;;301                /* Status stage */
;;;302                USBD_PrepareCtrlOut(0,0);
;;;303                break;
;;;304            }
;;;305            case GET_STATUS:
;;;306            {
;;;307                // Device
;;;308                if(g_usbd_SetupPacket[0] == 0x80)
;;;309                {
;;;310                    uint8_t u8Tmp;
;;;311    
;;;312                    u8Tmp = 0;
;;;313                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x40) u8Tmp |= 1; // Self-Powered/Bus-Powered.
;;;314                    if(g_usbd_sInfo->gu8ConfigDesc[7] & 0x20) u8Tmp |= (g_usbd_RemoteWakeupEn << 1); // Remote wake up
;;;315    
;;;316                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = u8Tmp;
;;;317                }
;;;318                // Interface
;;;319                else if (g_usbd_SetupPacket[0] == 0x81)
;;;320                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = 0;
;;;321                // Endpoint
;;;322                else if (g_usbd_SetupPacket[0] == 0x82)
;;;323                {
;;;324                    uint8_t ep = g_usbd_SetupPacket[4] & 0xF;
;;;325                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = USBD_GetStall(ep)? 1 : 0;
;;;326                }
;;;327    
;;;328                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1) = 0;
;;;329                /* Data stage */
;;;330                USBD_SET_DATA1(EP0);
;;;331                USBD_SET_PAYLOAD_LEN(EP0, 2);
;;;332                /* Status stage */
;;;333                USBD_PrepareCtrlOut(0,0);
;;;334                break;
;;;335            }
;;;336            default:
;;;337            {
;;;338                /* Setup error, stall the device */
;;;339                USBD_SET_EP_STALL(EP0);
;;;340                USBD_SET_EP_STALL(EP1);
;;;341                break;
;;;342            }
;;;343            }
;;;344        }
;;;345        else
;;;346        {
;;;347            // Host to device
;;;348            switch (g_usbd_SetupPacket[1])
000012  7850              LDRB     r0,[r2,#1]  ; g_usbd_SetupPacket
000014  d569              BPL      |L13.234|
000016  2800              CMP      r0,#0                 ;276
000018  d01c              BEQ      |L13.84|
00001a  2806              CMP      r0,#6                 ;276
00001c  d006              BEQ      |L13.44|
00001e  2808              CMP      r0,#8                 ;276
000020  d002              BEQ      |L13.40|
000022  280a              CMP      r0,#0xa               ;276
000024  d158              BNE      |L13.216|
000026  e004              B        |L13.50|
                  |L13.40|
000028  6aa9              LDR      r1,[r5,#0x28]         ;282  ; g_usbd_UsbConfig
00002a  e003              B        |L13.52|
                  |L13.44|
00002c  f7fffffe          BL       USBD_GetDescriptor
;;;349            {
;;;350            case CLEAR_FEATURE:
;;;351            {
;;;352                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;353                {
;;;354    
;;;355                    int32_t epNum, i;
;;;356    
;;;357                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;358                       a flag: g_u32EpStallLock is added to support it */
;;;359                    epNum = g_usbd_SetupPacket[4] & 0xF;
;;;360                    for(i = 0; i < USBD_MAX_EP; i++)
;;;361                    {
;;;362                        if(((USBD->EP[i].CFG & 0xF) == epNum) && ((g_u32EpStallLock & (1 << i)) == 0))
;;;363                            USBD->EP[i].CFG &= ~(USBD_CFG_SSTALL_Msk | USBD_CFG_DSQ_SYNC_Msk);
;;;364                    }
;;;365                }
;;;366                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;367                    g_usbd_RemoteWakeupEn = 0;
;;;368                /* Status stage */
;;;369                USBD_SET_DATA1(EP0);
;;;370                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;371                break;
;;;372            }
;;;373            case SET_ADDRESS:
;;;374            {
;;;375                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;376    
;;;377                // DATA IN for end of setup
;;;378                /* Status Stage */
;;;379                USBD_SET_DATA1(EP0);
;;;380                USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;381                break;
;;;382            }
;;;383            case SET_CONFIGURATION:
;;;384            {
;;;385                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;386    
;;;387                    if (g_usbd_pfnSetConfigCallback)
;;;388                        g_usbd_pfnSetConfigCallback();
;;;389    
;;;390                    if (g_usbd_UsbConfig == 0)
;;;391                    {
;;;392                        int volatile i;
;;;393    
;;;394                        /* Reset PID DATA0 */
;;;395                        for (i = 2; i < USBD_MAX_EP; i++)
;;;396                            USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
;;;397                    }
;;;398    
;;;399                    // DATA IN for end of setup
;;;400                    /* Status stage */
;;;401                    USBD_SET_DATA1(EP0);
;;;402                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;403                    break;
;;;404                }
;;;405    
;;;406                case SET_FEATURE:
;;;407                {
;;;408                    if (g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;409                        USBD_SetStall(g_usbd_SetupPacket[4] & 0xF);
;;;410                    else if (g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;411                        g_usbd_RemoteWakeupEn = 1;
;;;412    
;;;413                    /* Status stage */
;;;414                    USBD_SET_DATA1(EP0);
;;;415                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;416                    break;
;;;417                }
;;;418    
;;;419                case SET_INTERFACE:
;;;420                {
;;;421                    g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;422    
;;;423                    if (g_usbd_pfnSetInterface != NULL)
;;;424                        g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;425    
;;;426                    /* Status stage */
;;;427                    USBD_SET_DATA1(EP0);
;;;428                    USBD_SET_PAYLOAD_LEN(EP0, 0);
;;;429                    break;
;;;430                }
;;;431    
;;;432                default:
;;;433                {
;;;434                    /* Setup error, stall the device */
;;;435                    USBD_SET_EP_STALL(EP0);
;;;436                    USBD_SET_EP_STALL(EP1);
;;;437                    break;
;;;438                }
;;;439            }
;;;440        }
;;;441    }
000030  bdf8              POP      {r3-r7,pc}
                  |L13.50|
000032  6a29              LDR      r1,[r5,#0x20]         ;298  ; g_usbd_UsbAltInterface
                  |L13.52|
000034  4869              LDR      r0,|L13.476|
000036  6a02              LDR      r2,[r0,#0x20]         ;282
000038  4b69              LDR      r3,|L13.480|
00003a  18d2              ADDS     r2,r2,r3              ;282
00003c  7011              STRB     r1,[r2,#0]            ;282
00003e  6a81              LDR      r1,[r0,#0x28]         ;283
000040  2280              MOVS     r2,#0x80              ;283
000042  4311              ORRS     r1,r1,r2              ;283
000044  6281              STR      r1,[r0,#0x28]         ;283
000046  2101              MOVS     r1,#1                 ;284
                  |L13.72|
000048  6241              STR      r1,[r0,#0x24]         ;284
00004a  2100              MOVS     r1,#0                 ;286
00004c  4608              MOV      r0,r1                 ;286
00004e  f7fffffe          BL       USBD_PrepareCtrlOut
000052  bdf8              POP      {r3-r7,pc}
                  |L13.84|
000054  2980              CMP      r1,#0x80              ;308
000056  d004              BEQ      |L13.98|
000058  2981              CMP      r1,#0x81              ;319
00005a  d010              BEQ      |L13.126|
00005c  2982              CMP      r1,#0x82              ;322
00005e  d014              BEQ      |L13.138|
000060  e02f              B        |L13.194|
                  |L13.98|
000062  6c29              LDR      r1,[r5,#0x40]         ;313  ; g_usbd_sInfo
000064  2000              MOVS     r0,#0                 ;312
000066  6849              LDR      r1,[r1,#4]            ;313
000068  79c9              LDRB     r1,[r1,#7]            ;313
00006a  064a              LSLS     r2,r1,#25             ;313
00006c  d500              BPL      |L13.112|
00006e  2001              MOVS     r0,#1                 ;313
                  |L13.112|
000070  0689              LSLS     r1,r1,#26             ;314
000072  d521              BPL      |L13.184|
000074  7829              LDRB     r1,[r5,#0]            ;314  ; g_usbd_RemoteWakeupEn
000076  0049              LSLS     r1,r1,#1              ;314
000078  4301              ORRS     r1,r1,r0              ;314
00007a  b2c8              UXTB     r0,r1                 ;314
00007c  e01c              B        |L13.184|
                  |L13.126|
00007e  4857              LDR      r0,|L13.476|
000080  6a00              LDR      r0,[r0,#0x20]         ;320
000082  4957              LDR      r1,|L13.480|
000084  1840              ADDS     r0,r0,r1              ;320
000086  7004              STRB     r4,[r0,#0]            ;320
000088  e01b              B        |L13.194|
                  |L13.138|
00008a  7910              LDRB     r0,[r2,#4]            ;324  ; g_usbd_SetupPacket
00008c  0702              LSLS     r2,r0,#28             ;324
00008e  0f12              LSRS     r2,r2,#28             ;324
000090  2000              MOVS     r0,#0                 ;324
                  |L13.146|
000092  4b52              LDR      r3,|L13.476|
000094  0101              LSLS     r1,r0,#4              ;324
000096  3328              ADDS     r3,r3,#0x28           ;324
000098  18c9              ADDS     r1,r1,r3              ;324
00009a  6809              LDR      r1,[r1,#0]            ;324
00009c  070b              LSLS     r3,r1,#28             ;324
00009e  0f1b              LSRS     r3,r3,#28             ;324
0000a0  4293              CMP      r3,r2                 ;324
0000a2  d002              BEQ      |L13.170|
0000a4  1c40              ADDS     r0,r0,#1              ;324
0000a6  2808              CMP      r0,#8                 ;324
0000a8  dbf3              BLT      |L13.146|
                  |L13.170|
0000aa  2001              MOVS     r0,#1                 ;324
0000ac  0240              LSLS     r0,r0,#9              ;324
0000ae  4201              TST      r1,r0                 ;324
0000b0  d001              BEQ      |L13.182|
0000b2  2001              MOVS     r0,#1                 ;325
0000b4  e000              B        |L13.184|
                  |L13.182|
0000b6  2000              MOVS     r0,#0                 ;325
                  |L13.184|
0000b8  4948              LDR      r1,|L13.476|
0000ba  6a09              LDR      r1,[r1,#0x20]         ;325
0000bc  4a48              LDR      r2,|L13.480|
0000be  1889              ADDS     r1,r1,r2              ;325
0000c0  7008              STRB     r0,[r1,#0]            ;325
                  |L13.194|
0000c2  4846              LDR      r0,|L13.476|
0000c4  6a01              LDR      r1,[r0,#0x20]         ;328
0000c6  4a46              LDR      r2,|L13.480|
0000c8  1889              ADDS     r1,r1,r2              ;328
0000ca  704c              STRB     r4,[r1,#1]            ;328
0000cc  6a81              LDR      r1,[r0,#0x28]         ;330
0000ce  2280              MOVS     r2,#0x80              ;330
0000d0  4311              ORRS     r1,r1,r2              ;330
0000d2  6281              STR      r1,[r0,#0x28]         ;330
0000d4  2102              MOVS     r1,#2                 ;331
0000d6  e7b7              B        |L13.72|
                  |L13.216|
0000d8  4840              LDR      r0,|L13.476|
0000da  6a82              LDR      r2,[r0,#0x28]         ;339
0000dc  1541              ASRS     r1,r0,#21             ;339
0000de  430a              ORRS     r2,r2,r1              ;339
0000e0  6282              STR      r2,[r0,#0x28]         ;339
0000e2  6b82              LDR      r2,[r0,#0x38]         ;340
0000e4  430a              ORRS     r2,r2,r1              ;340
0000e6  6382              STR      r2,[r0,#0x38]         ;340
0000e8  bdf8              POP      {r3-r7,pc}
                  |L13.234|
0000ea  2805              CMP      r0,#5                 ;348
0000ec  d03e              BEQ      |L13.364|
0000ee  dc09              BGT      |L13.260|
0000f0  2801              CMP      r0,#1                 ;348
0000f2  d013              BEQ      |L13.284|
0000f4  2803              CMP      r0,#3                 ;348
0000f6  d1ef              BNE      |L13.216|
0000f8  7890              LDRB     r0,[r2,#2]            ;408  ; g_usbd_SetupPacket
0000fa  2800              CMP      r0,#0                 ;408
0000fc  d052              BEQ      |L13.420|
0000fe  2801              CMP      r0,#1                 ;410
000100  d066              BEQ      |L13.464|
000102  e02c              B        |L13.350|
                  |L13.260|
000104  2809              CMP      r0,#9                 ;348
000106  d034              BEQ      |L13.370|
000108  280b              CMP      r0,#0xb               ;348
00010a  d1e5              BNE      |L13.216|
00010c  7890              LDRB     r0,[r2,#2]            ;421  ; g_usbd_SetupPacket
00010e  6228              STR      r0,[r5,#0x20]         ;421  ; g_usbd_UsbAltInterface
000110  6b69              LDR      r1,[r5,#0x34]         ;423  ; g_usbd_pfnSetInterface
000112  2900              CMP      r1,#0                 ;423
000114  d023              BEQ      |L13.350|
000116  6a28              LDR      r0,[r5,#0x20]         ;424  ; g_usbd_UsbAltInterface
000118  4788              BLX      r1                    ;424
00011a  e020              B        |L13.350|
                  |L13.284|
00011c  7890              LDRB     r0,[r2,#2]            ;352  ; g_usbd_SetupPacket
00011e  2800              CMP      r0,#0                 ;352
000120  d002              BEQ      |L13.296|
000122  2801              CMP      r0,#1                 ;366
000124  d01a              BEQ      |L13.348|
000126  e01a              B        |L13.350|
                  |L13.296|
000128  7910              LDRB     r0,[r2,#4]            ;359  ; g_usbd_SetupPacket
00012a  0703              LSLS     r3,r0,#28             ;359
00012c  0f1b              LSRS     r3,r3,#28             ;359
00012e  2000              MOVS     r0,#0                 ;360
                  |L13.304|
000130  492a              LDR      r1,|L13.476|
000132  0102              LSLS     r2,r0,#4              ;362
000134  1851              ADDS     r1,r2,r1              ;362
000136  6a8a              LDR      r2,[r1,#0x28]         ;362
000138  0712              LSLS     r2,r2,#28             ;362
00013a  0f12              LSRS     r2,r2,#28             ;362
00013c  429a              CMP      r2,r3                 ;362
00013e  d109              BNE      |L13.340|
000140  2201              MOVS     r2,#1                 ;362
000142  6bee              LDR      r6,[r5,#0x3c]         ;362  ; g_u32EpStallLock
000144  4082              LSLS     r2,r2,r0              ;362
000146  4232              TST      r2,r6                 ;362
000148  d104              BNE      |L13.340|
00014a  6a8a              LDR      r2,[r1,#0x28]         ;363
00014c  2605              MOVS     r6,#5                 ;363
00014e  01f6              LSLS     r6,r6,#7              ;363
000150  43b2              BICS     r2,r2,r6              ;363
000152  628a              STR      r2,[r1,#0x28]         ;363
                  |L13.340|
000154  1c40              ADDS     r0,r0,#1              ;363
000156  2808              CMP      r0,#8                 ;360
000158  dbea              BLT      |L13.304|
00015a  e000              B        |L13.350|
                  |L13.348|
00015c  702c              STRB     r4,[r5,#0]            ;367
                  |L13.350|
00015e  481f              LDR      r0,|L13.476|
000160  6a81              LDR      r1,[r0,#0x28]         ;369
000162  2280              MOVS     r2,#0x80              ;369
000164  4311              ORRS     r1,r1,r2              ;369
000166  6281              STR      r1,[r0,#0x28]         ;369
000168  6244              STR      r4,[r0,#0x24]         ;370
00016a  bdf8              POP      {r3-r7,pc}
                  |L13.364|
00016c  7890              LDRB     r0,[r2,#2]            ;375  ; g_usbd_SetupPacket
00016e  61a8              STR      r0,[r5,#0x18]         ;375  ; g_usbd_UsbAddr
000170  e7f5              B        |L13.350|
                  |L13.370|
000172  7890              LDRB     r0,[r2,#2]            ;385  ; g_usbd_SetupPacket
000174  62a8              STR      r0,[r5,#0x28]         ;385  ; g_usbd_UsbConfig
000176  6ba8              LDR      r0,[r5,#0x38]         ;387  ; g_usbd_pfnSetConfigCallback
000178  2800              CMP      r0,#0                 ;387
00017a  d000              BEQ      |L13.382|
00017c  4780              BLX      r0                    ;388
                  |L13.382|
00017e  6aa8              LDR      r0,[r5,#0x28]         ;390  ; g_usbd_UsbConfig
000180  2800              CMP      r0,#0                 ;390
000182  d1ec              BNE      |L13.350|
000184  2002              MOVS     r0,#2                 ;395
000186  9000              STR      r0,[sp,#0]            ;395
                  |L13.392|
000188  4914              LDR      r1,|L13.476|
00018a  0100              LSLS     r0,r0,#4              ;396
00018c  3128              ADDS     r1,r1,#0x28           ;396
00018e  1840              ADDS     r0,r0,r1              ;396
000190  6801              LDR      r1,[r0,#0]            ;396
000192  2280              MOVS     r2,#0x80              ;396
000194  4391              BICS     r1,r1,r2              ;396
000196  6001              STR      r1,[r0,#0]            ;396
000198  9800              LDR      r0,[sp,#0]            ;395
00019a  1c40              ADDS     r0,r0,#1              ;395
00019c  9000              STR      r0,[sp,#0]            ;395
00019e  2808              CMP      r0,#8                 ;395
0001a0  dbf2              BLT      |L13.392|
0001a2  e7dc              B        |L13.350|
                  |L13.420|
0001a4  7910              LDRB     r0,[r2,#4]            ;409  ; g_usbd_SetupPacket
0001a6  0703              LSLS     r3,r0,#28             ;409
0001a8  0f1b              LSRS     r3,r3,#28             ;409
0001aa  2000              MOVS     r0,#0                 ;409
                  |L13.428|
0001ac  4a0b              LDR      r2,|L13.476|
0001ae  0101              LSLS     r1,r0,#4              ;409
0001b0  3228              ADDS     r2,r2,#0x28           ;409
0001b2  188a              ADDS     r2,r1,r2              ;409
0001b4  6811              LDR      r1,[r2,#0]            ;409
0001b6  070d              LSLS     r5,r1,#28             ;409
0001b8  0f2d              LSRS     r5,r5,#28             ;409
0001ba  429d              CMP      r5,r3                 ;409
0001bc  d104              BNE      |L13.456|
0001be  2001              MOVS     r0,#1                 ;409
0001c0  0240              LSLS     r0,r0,#9              ;409
0001c2  4301              ORRS     r1,r1,r0              ;409
0001c4  6011              STR      r1,[r2,#0]            ;409
0001c6  e7ca              B        |L13.350|
                  |L13.456|
0001c8  1c40              ADDS     r0,r0,#1              ;409
0001ca  2808              CMP      r0,#8                 ;409
0001cc  dbee              BLT      |L13.428|
0001ce  e7c6              B        |L13.350|
                  |L13.464|
0001d0  2001              MOVS     r0,#1                 ;411
0001d2  7028              STRB     r0,[r5,#0]            ;411
0001d4  e7c3              B        |L13.350|
;;;442    
                          ENDP

0001d6  0000              DCW      0x0000
                  |L13.472|
                          DCD      ||.data||
                  |L13.476|
                          DCD      0x40060000
                  |L13.480|
                          DCD      0x40060100

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;78      */
;;;79     void USBD_Start(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81         /* Enable USB-related interrupts. */
;;;82         USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000002  4c06              LDR      r4,|L14.28|
000004  68a0              LDR      r0,[r4,#8]
000006  210f              MOVS     r1,#0xf
000008  4308              ORRS     r0,r0,r1
00000a  60a0              STR      r0,[r4,#8]
;;;83         CLK_SysTickDelay(100000);
00000c  4804              LDR      r0,|L14.32|
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;84         USBD_CLR_SE0();
000012  6820              LDR      r0,[r4,#0]
000014  2110              MOVS     r1,#0x10
000016  4388              BICS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
;;;85     }
00001a  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L14.28|
                          DCD      0x40060000
                  |L14.32|
                          DCD      0x000186a0

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;582     */
;;;583    void USBD_SwReset(void)
000000  b510              PUSH     {r4,lr}
;;;584    {
;;;585        int i;
;;;586    
;;;587        // Reset all variables for protocol
;;;588        g_usbd_CtrlInPointer = 0;
000002  480b              LDR      r0,|L15.48|
000004  2300              MOVS     r3,#0
;;;589        g_usbd_CtrlInSize = 0;
000006  6043              STR      r3,[r0,#4]  ; g_usbd_CtrlInPointer
000008  6083              STR      r3,[r0,#8]  ; g_usbd_CtrlInSize
;;;590        g_usbd_CtrlOutPointer = 0;
;;;591        g_usbd_CtrlOutSize = 0;
00000a  60c3              STR      r3,[r0,#0xc]  ; g_usbd_CtrlOutPointer
00000c  6103              STR      r3,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;592        g_usbd_CtrlOutSizeLimit = 0;
00000e  6143              STR      r3,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;593        memset(g_usbd_SetupPacket, 0, 8);
000010  6443              STR      r3,[r0,#0x44]  ; g_usbd_SetupPacket
;;;594    
;;;595        /* Reset PID DATA0 */
;;;596        for (i=0; i<USBD_MAX_EP; i++)
000012  6483              STR      r3,[r0,#0x48]  ; g_usbd_SetupPacket
000014  4618              MOV      r0,r3
                  |L15.22|
;;;597            USBD->EP[i].CFG &= ~USBD_CFG_DSQ_SYNC_Msk;
000016  4907              LDR      r1,|L15.52|
000018  0102              LSLS     r2,r0,#4
00001a  1851              ADDS     r1,r2,r1
00001c  6a8a              LDR      r2,[r1,#0x28]
00001e  2480              MOVS     r4,#0x80
000020  43a2              BICS     r2,r2,r4
000022  628a              STR      r2,[r1,#0x28]
000024  1c40              ADDS     r0,r0,#1
000026  2808              CMP      r0,#8                 ;596
000028  dbf5              BLT      |L15.22|
;;;598    
;;;599        // Reset USB device address
;;;600        USBD_SET_ADDR(0);
00002a  4802              LDR      r0,|L15.52|
00002c  6103              STR      r3,[r0,#0x10]
;;;601    }
00002e  bd10              POP      {r4,pc}
;;;602    
                          ENDP

                  |L15.48|
                          DCD      ||.data||
                  |L15.52|
                          DCD      0x40060000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00                DCB      0x00
                  g_usbd_CtrlInZeroFlag
000001  000000            DCB      0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_CtrlOutToggle
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
000044  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
