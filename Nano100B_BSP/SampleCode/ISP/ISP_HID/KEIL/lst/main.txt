; generated by Component: ARM Compiler 5.99 update 4 (build 402) Tool: ArmCC [5b6802]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --feedback=.\obj\NANO100B_ISP_HID_PB15.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;16     /*--------------------------------------------------------------------------*/
;;;17     void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;18     {
;;;19         /* Enable external 12MHz HXT */
;;;20         CLK->PWRCTL |= (CLK_PWRCTL_HXT_EN_Msk | CLK_PWRCTL_HIRC_EN_Msk);
000002  4c14              LDR      r4,|L1.84|
000004  6820              LDR      r0,[r4,#0]
000006  2105              MOVS     r1,#5
000008  4308              ORRS     r0,r0,r1
00000a  6020              STR      r0,[r4,#0]
;;;21     
;;;22         /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;23         CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLK_S_Msk)) | CLK_CLKSEL0_HCLK_S_HIRC;
00000c  6920              LDR      r0,[r4,#0x10]
00000e  2107              MOVS     r1,#7
000010  4308              ORRS     r0,r0,r1
000012  6120              STR      r0,[r4,#0x10]
;;;24     
;;;25         /* 12MHz HIRC ==> 96MHz Pll Colck Output */
;;;26         CLK->PLLCTL = CLK_PLLCTL_96MHz_HIRC;
000014  4810              LDR      r0,|L1.88|
000016  6260              STR      r0,[r4,#0x24]
;;;27     
;;;28         /* Waiting for clock ready */
;;;29         CLK_WaitClockReady(CLK_CLKSTATUS_PLL_STB_Msk);
000018  2004              MOVS     r0,#4
00001a  f7fffffe          BL       CLK_WaitClockReady
;;;30     
;;;31         /* 96MHz / (2 + 1) = 32MHz */
;;;32         CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_HCLK_N_Msk) | CLK_HCLK_CLK_DIVIDER(3);
00001e  69e0              LDR      r0,[r4,#0x1c]
000020  0900              LSRS     r0,r0,#4
000022  0100              LSLS     r0,r0,#4
000024  1c80              ADDS     r0,r0,#2
000026  61e0              STR      r0,[r4,#0x1c]
;;;33         CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_HCLK_S_Msk) | CLK_CLKSEL0_HCLK_S_PLL;
000028  6920              LDR      r0,[r4,#0x10]
00002a  08c0              LSRS     r0,r0,#3
00002c  00c0              LSLS     r0,r0,#3
00002e  1c80              ADDS     r0,r0,#2
000030  6120              STR      r0,[r4,#0x10]
;;;34         /* Update System Core Clock */
;;;35         /* User can use SystemCoreClockUpdate() to calculate PllClock, SystemCoreClock and CycylesPerUs automatically. */
;;;36     //    SystemCoreClockUpdate();
;;;37         SystemCoreClock = 32000000;     // HCLK
000032  490b              LDR      r1,|L1.96|
000034  4809              LDR      r0,|L1.92|
;;;38         CyclesPerUs     = 32;
000036  6008              STR      r0,[r1,#0]  ; SystemCoreClock
000038  490a              LDR      r1,|L1.100|
00003a  2020              MOVS     r0,#0x20
;;;39         /* Select IP clock source */
;;;40         CLK->CLKDIV0 = (CLK->CLKDIV0 & ~CLK_CLKDIV0_USB_N_Msk) | CLK_USB_CLK_DIVIDER(2);
00003c  6008              STR      r0,[r1,#0]  ; CyclesPerUs
00003e  69e0              LDR      r0,[r4,#0x1c]
000040  21f0              MOVS     r1,#0xf0
000042  4388              BICS     r0,r0,r1
000044  3010              ADDS     r0,r0,#0x10
000046  61e0              STR      r0,[r4,#0x1c]
;;;41         /* Enable IP clock */
;;;42         CLK->APBCLK |= CLK_APBCLK_USBD_EN;
000048  68a0              LDR      r0,[r4,#8]
00004a  04a1              LSLS     r1,r4,#18
00004c  4308              ORRS     r0,r0,r1
00004e  60a0              STR      r0,[r4,#8]
;;;43     }
000050  bd10              POP      {r4,pc}
;;;44     
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      0x50000200
                  |L1.88|
                          DCD      0x00020220
                  |L1.92|
                          DCD      0x01e84800
                  |L1.96|
                          DCD      SystemCoreClock
                  |L1.100|
                          DCD      CyclesPerUs

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;48     void USBD_IRQHandler(void);
;;;49     int32_t main(void)
000000  e005              B        |L2.14|
                  |L2.2|
000002  2159              MOVS     r1,#0x59
000004  6001              STR      r1,[r0,#0]
000006  2116              MOVS     r1,#0x16
000008  6001              STR      r1,[r0,#0]
00000a  2188              MOVS     r1,#0x88
00000c  6001              STR      r1,[r0,#0]
                  |L2.14|
00000e  4831              LDR      r0,|L2.212|
000010  6801              LDR      r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d1f5              BNE      |L2.2|
;;;50     {
;;;51         /* Unlock write-protected registers */
;;;52         SYS_UnlockReg();
;;;53         WDT->CTL &= ~(WDT_CTL_WTE_Msk);
000016  4c30              LDR      r4,|L2.216|
000018  6820              LDR      r0,[r4,#0]
00001a  2608              MOVS     r6,#8
00001c  43b0              BICS     r0,r0,r6
00001e  6020              STR      r0,[r4,#0]
;;;54         WDT->CTL |= (WDT_TIMEOUT_2POW18 | WDT_CTL_WTR_Msk);
000020  6820              LDR      r0,[r4,#0]
000022  2771              MOVS     r7,#0x71
000024  4338              ORRS     r0,r0,r7
000026  6020              STR      r0,[r4,#0]
;;;55         SYS_Init();
000028  f7fffffe          BL       SYS_Init
;;;56         CLK->AHBCLK |= CLK_AHBCLK_ISP_EN_Msk;
00002c  482b              LDR      r0,|L2.220|
00002e  6841              LDR      r1,[r0,#4]
000030  2204              MOVS     r2,#4
000032  4311              ORRS     r1,r1,r2
000034  6041              STR      r1,[r0,#4]
;;;57         FMC->ISPCON |= FMC_ISPCON_ISPEN_Msk;
000036  482a              LDR      r0,|L2.224|
000038  6801              LDR      r1,[r0,#0]
00003a  2201              MOVS     r2,#1
00003c  4311              ORRS     r1,r1,r2
00003e  6001              STR      r1,[r0,#0]
;;;58         g_apromSize = GetApromSize();
000040  f7fffffe          BL       GetApromSize
000044  4927              LDR      r1,|L2.228|
;;;59         GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
000046  6008              STR      r0,[r1,#0]  ; g_apromSize
000048  4927              LDR      r1,|L2.232|
00004a  4828              LDR      r0,|L2.236|
00004c  f7fffffe          BL       GetDataFlashInfo
;;;60     
;;;61         if (DetectPin == 0)
000050  4827              LDR      r0,|L2.240|
000052  6bc0              LDR      r0,[r0,#0x3c]
000054  2800              CMP      r0,#0
000056  d019              BEQ      |L2.140|
;;;62         {
;;;63             USBD_Open(&gsInfo, HID_ClassRequest, NULL);
;;;64             /* Endpoint configuration */
;;;65             HID_Init();
;;;66             //NVIC_EnableIRQ(USBD_IRQn);
;;;67             USBD_Start();
;;;68     
;;;69             while (DetectPin == 0)
;;;70             {
;;;71                 // polling USBD interrupt flag
;;;72                 USBD_IRQHandler();
;;;73                 if (bUsbDataReady == TRUE)
;;;74                 {
;;;75                     WDT->CTL &= ~(WDT_CTL_WTE_Msk);
;;;76                     WDT->CTL |= (WDT_TIMEOUT_2POW18 | WDT_CTL_WTR_Msk);
;;;77                     ParseCmd((uint8_t *)usb_rcvbuf, EP3_MAX_PKT_SIZE);
;;;78                     EP2_Handler();
;;;79                     bUsbDataReady = FALSE;
;;;80                 }
;;;81             }
;;;82         }
;;;83         else
;;;84         {
;;;85             SysTick->LOAD = 300000 * CyclesPerUs;
000058  4826              LDR      r0,|L2.244|
00005a  6801              LDR      r1,[r0,#0]  ; CyclesPerUs
00005c  4826              LDR      r0,|L2.248|
00005e  4341              MULS     r1,r0,r1
000060  4826              LDR      r0,|L2.252|
000062  6141              STR      r1,[r0,#0x14]
;;;86             SysTick->VAL  = (0x00);
000064  2100              MOVS     r1,#0
000066  6181              STR      r1,[r0,#0x18]
;;;87             SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
000068  2105              MOVS     r1,#5
00006a  6101              STR      r1,[r0,#0x10]
                  |L2.108|
;;;88     
;;;89             /* Waiting for down-count to zero */
;;;90             while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
00006c  6901              LDR      r1,[r0,#0x10]
00006e  03c9              LSLS     r1,r1,#15
000070  d5fc              BPL      |L2.108|
                  |L2.114|
;;;91         }
;;;92     
;;;93         outpw(&SYS->RST_SRC, 3);//clear bit
000072  2003              MOVS     r0,#3
000074  2105              MOVS     r1,#5
000076  0709              LSLS     r1,r1,#28
000078  6048              STR      r0,[r1,#4]
;;;94         outpw(&FMC->ISPCON, inpw(&FMC->ISPCON) & 0xFFFFFFFC);
00007a  4819              LDR      r0,|L2.224|
00007c  6801              LDR      r1,[r0,#0]
00007e  0889              LSRS     r1,r1,#2
000080  0089              LSLS     r1,r1,#2
000082  6001              STR      r1,[r0,#0]
;;;95         outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
000084  491f              LDR      r1,|L2.260|
000086  481e              LDR      r0,|L2.256|
000088  60c8              STR      r0,[r1,#0xc]
                  |L2.138|
;;;96     
;;;97         /* Trap the CPU */
;;;98         while (1);
00008a  e7fe              B        |L2.138|
                  |L2.140|
00008c  2200              MOVS     r2,#0                 ;63
00008e  491e              LDR      r1,|L2.264|
000090  481e              LDR      r0,|L2.268|
000092  f7fffffe          BL       USBD_Open
000096  f7fffffe          BL       HID_Init
00009a  f7fffffe          BL       USBD_Start
00009e  e013              B        |L2.200|
                  |L2.160|
0000a0  f7fffffe          BL       USBD_IRQHandler
0000a4  4d1a              LDR      r5,|L2.272|
0000a6  7828              LDRB     r0,[r5,#0]            ;73  ; bUsbDataReady
0000a8  2801              CMP      r0,#1                 ;73
0000aa  d10d              BNE      |L2.200|
0000ac  6820              LDR      r0,[r4,#0]            ;75
0000ae  43b0              BICS     r0,r0,r6              ;75
0000b0  6020              STR      r0,[r4,#0]            ;75
0000b2  6820              LDR      r0,[r4,#0]            ;76
0000b4  4338              ORRS     r0,r0,r7              ;76
0000b6  6020              STR      r0,[r4,#0]            ;76
0000b8  2140              MOVS     r1,#0x40              ;77
0000ba  4816              LDR      r0,|L2.276|
0000bc  f7fffffe          BL       ParseCmd
0000c0  f7fffffe          BL       EP2_Handler
0000c4  2000              MOVS     r0,#0                 ;79
0000c6  7028              STRB     r0,[r5,#0]            ;79
                  |L2.200|
0000c8  4809              LDR      r0,|L2.240|
0000ca  6bc0              LDR      r0,[r0,#0x3c]         ;69
0000cc  2800              CMP      r0,#0                 ;69
0000ce  d0e7              BEQ      |L2.160|
0000d0  e7cf              B        |L2.114|
;;;99     }
;;;100    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L2.212|
                          DCD      0x50000100
                  |L2.216|
                          DCD      0x40004000
                  |L2.220|
                          DCD      0x50000200
                  |L2.224|
                          DCD      0x5000c000
                  |L2.228|
                          DCD      g_apromSize
                  |L2.232|
                          DCD      g_dataFlashSize
                  |L2.236|
                          DCD      g_dataFlashAddr
                  |L2.240|
                          DCD      0x50004240
                  |L2.244|
                          DCD      CyclesPerUs
                  |L2.248|
                          DCD      0x000493e0
                  |L2.252|
                          DCD      0xe000e000
                  |L2.256|
                          DCD      0x05fa0004
                  |L2.260|
                          DCD      0xe000ed00
                  |L2.264|
                          DCD      HID_ClassRequest
                  |L2.268|
                          DCD      gsInfo
                  |L2.272|
                          DCD      bUsbDataReady
                  |L2.276|
                          DCD      usb_rcvbuf

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
