; generated by Component: ARM Compiler 5.99 update 4 (build 402) Tool: ArmCC [5b6802]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\isp_user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\isp_user.d --feedback=.\obj\NANO100B_ISP_HID_PB15.fed --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\Nano100Series\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\isp_user.crf ..\ISP_USER.c]
                          THUMB

                          AREA ||i.Checksum||, CODE, READONLY, ALIGN=1

                  Checksum PROC
;;;18     
;;;19     static uint16_t Checksum(unsigned char *buf, int len)
000000  4603              MOV      r3,r0
;;;20     {
000002  b510              PUSH     {r4,lr}
;;;21         int i;
;;;22         uint16_t c;
;;;23     
;;;24         for (c = 0, i = 0 ; i < len; i++)
000004  2000              MOVS     r0,#0
000006  4602              MOV      r2,r0
000008  e003              B        |L1.18|
                  |L1.10|
;;;25         {
;;;26             c += buf[i];
00000a  5c9c              LDRB     r4,[r3,r2]
00000c  1820              ADDS     r0,r4,r0
00000e  b280              UXTH     r0,r0
000010  1c52              ADDS     r2,r2,#1
                  |L1.18|
000012  428a              CMP      r2,r1                 ;24
000014  dbf9              BLT      |L1.10|
;;;27         }
;;;28     
;;;29         return (c);
;;;30     }
000016  bd10              POP      {r4,pc}
;;;31     
                          ENDP


                          AREA ||i.EraseAP||, CODE, READONLY, ALIGN=1

                  EraseAP PROC
;;;54     //bAprom == TRUE erase all aprom besides data flash
;;;55     void EraseAP(unsigned int addr_start, unsigned int addr_end)
000000  b570              PUSH     {r4-r6,lr}
;;;56     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;57         unsigned int eraseLoop = addr_start;
;;;58     
;;;59         for (; eraseLoop < addr_end; eraseLoop += FMC_FLASH_PAGE_SIZE)
000006  e005              B        |L2.20|
                  |L2.8|
;;;60         {
;;;61             FMC_Erase_User(eraseLoop);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FMC_Erase_User
00000e  34ff              ADDS     r4,r4,#0xff
000010  34ff              ADDS     r4,r4,#0xff
000012  3402              ADDS     r4,#2
                  |L2.20|
000014  42ac              CMP      r4,r5                 ;59
000016  d3f7              BCC      |L2.8|
;;;62         }
;;;63     
;;;64         return;
;;;65     }
000018  bd70              POP      {r4-r6,pc}
;;;66     
                          ENDP


                          AREA ||i.ParseCmd||, CODE, READONLY, ALIGN=2

                  ParseCmd PROC
;;;82     
;;;83     int ParseCmd(unsigned char *buffer, uint8_t len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;84     {
000002  b083              SUB      sp,sp,#0xc
;;;85         static uint32_t StartAddress, StartAddress_bak, TotalLen, TotalLen_bak, LastDataLen, g_packno = 1;
;;;86         uint8_t *response;
;;;87         uint16_t lcksum;
;;;88         uint32_t lcmd, srclen, i, regcnf0, security;
;;;89         unsigned char *pSrc;
;;;90         static uint32_t gcmd;
;;;91         response = response_buff;
;;;92         pSrc = buffer;
;;;93         srclen = len;
;;;94         lcmd = inpw(pSrc);
000004  9f03              LDR      r7,[sp,#0xc]
000006  4d95              LDR      r5,|L3.604|
000008  9e04              LDR      r6,[sp,#0x10]
00000a  683c              LDR      r4,[r7,#0]
;;;95         outpw(response + 4, 0);
00000c  2000              MOVS     r0,#0
00000e  6068              STR      r0,[r5,#4]
;;;96         pSrc += 8;
;;;97         srclen -= 8;
;;;98         ReadData(Config0, Config0 + 8, (uint32_t *)(response + 8)); //read config
000010  462a              MOV      r2,r5
000012  3208              ADDS     r2,r2,#8
000014  2003              MOVS     r0,#3
000016  4992              LDR      r1,|L3.608|
000018  0500              LSLS     r0,r0,#20
00001a  3e08              SUBS     r6,r6,#8
00001c  3708              ADDS     r7,r7,#8
00001e  9200              STR      r2,[sp,#0]
000020  f7fffffe          BL       ReadData
;;;99         regcnf0 = *(uint32_t *)(response + 8);
000024  68a8              LDR      r0,[r5,#8]
;;;100        security = regcnf0 & 0x2;
000026  2102              MOVS     r1,#2
000028  9001              STR      r0,[sp,#4]
00002a  4008              ANDS     r0,r0,r1
;;;101    
;;;102        if (lcmd == CMD_SYNC_PACKNO)
00002c  9002              STR      r0,[sp,#8]
00002e  2ca4              CMP      r4,#0xa4
000030  d01a              BEQ      |L3.104|
;;;103        {
;;;104            g_packno = inpw(pSrc);
;;;105        }
;;;106    
;;;107        if ((lcmd) && (lcmd != CMD_RESEND_PACKET))
000032  2c00              CMP      r4,#0
000034  d01e              BEQ      |L3.116|
000036  2cff              CMP      r4,#0xff
000038  d070              BEQ      |L3.284|
                  |L3.58|
;;;108        {
;;;109            gcmd = lcmd;
00003a  488a              LDR      r0,|L3.612|
;;;110        }
;;;111    
;;;112        if (lcmd == CMD_GET_FWVER)
00003c  2ca6              CMP      r4,#0xa6
00003e  6184              STR      r4,[r0,#0x18]  ; gcmd
000040  d016              BEQ      |L3.112|
;;;113        {
;;;114            response[8] = FW_VERSION;//version 2.3
;;;115        }
;;;116        else if (lcmd == CMD_GET_DEVICEID)
000042  2cb1              CMP      r4,#0xb1
000044  d017              BEQ      |L3.118|
;;;117        {
;;;118            outpw(response + 8, SYS->PDID);
;;;119            goto out;
;;;120        }
;;;121        else if (lcmd == CMD_RUN_APROM || lcmd == CMD_RUN_LDROM || lcmd == CMD_RESET)
000046  2cab              CMP      r4,#0xab
000048  d01a              BEQ      |L3.128|
00004a  2cac              CMP      r4,#0xac
00004c  d018              BEQ      |L3.128|
00004e  2cad              CMP      r4,#0xad
000050  d016              BEQ      |L3.128|
;;;122        {
;;;123            outpw(&SYS->RST_SRC, 3);//clear bit
;;;124    
;;;125            /* Set BS */
;;;126            if (lcmd == CMD_RUN_APROM)
;;;127            {
;;;128                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;129            }
;;;130            else if (lcmd == CMD_RUN_LDROM)
;;;131            {
;;;132                i = (FMC->ISPCON & 0xFFFFFFFC);
;;;133                i |= 0x00000002;
;;;134            }
;;;135            else
;;;136            {
;;;137                i = (FMC->ISPCON & 0xFFFFFFFE);//ISP disable
;;;138            }
;;;139    
;;;140            outpw(&FMC->ISPCON, i);
;;;141            outpw(&SCB->AIRCR, (V6M_AIRCR_VECTKEY_DATA | V6M_AIRCR_SYSRESETREQ));
;;;142    
;;;143            /* Trap the CPU */
;;;144            while (1);
;;;145        }
;;;146        else if (lcmd == CMD_CONNECT)
000052  2cae              CMP      r4,#0xae
000054  d030              BEQ      |L3.184|
;;;147        {
;;;148            g_packno = 1;
;;;149            goto out;
;;;150        }
;;;151        else if (lcmd == CMD_DISCONNECT)
000056  2caf              CMP      r4,#0xaf
000058  d032              BEQ      |L3.192|
;;;152        {
;;;153            return 0;
;;;154        }
;;;155        else if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_ERASE_ALL))
00005a  2ca0              CMP      r4,#0xa0
00005c  d033              BEQ      |L3.198|
00005e  2ca3              CMP      r4,#0xa3
000060  d031              BEQ      |L3.198|
;;;156        {
;;;157            EraseAP(FMC_APROM_BASE, (g_apromSize < g_dataFlashAddr) ? g_apromSize : g_dataFlashAddr); // erase APROM // g_dataFlashAddr, g_apromSize
;;;158    
;;;159            if (lcmd == CMD_ERASE_ALL)   //erase data flash
;;;160            {
;;;161                EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;162                *(uint32_t *)(response + 8) = regcnf0 | 0x02;
;;;163                UpdateConfig((uint32_t *)(response + 8), NULL);
;;;164            }
;;;165    
;;;166            bUpdateApromCmd = TRUE;
;;;167        }
;;;168        else if (lcmd == CMD_GET_FLASHMODE)
000062  2cca              CMP      r4,#0xca
000064  d054              BEQ      |L3.272|
000066  e04a              B        |L3.254|
                  |L3.104|
000068  6838              LDR      r0,[r7,#0]            ;104
00006a  497e              LDR      r1,|L3.612|
00006c  6148              STR      r0,[r1,#0x14]         ;104  ; g_packno
00006e  e7e4              B        |L3.58|
                  |L3.112|
000070  2031              MOVS     r0,#0x31              ;114
000072  7228              STRB     r0,[r5,#8]            ;114
                  |L3.116|
000074  e06b              B        |L3.334|
                  |L3.118|
000076  2005              MOVS     r0,#5                 ;118
000078  0700              LSLS     r0,r0,#28             ;118
00007a  6800              LDR      r0,[r0,#0]            ;118
00007c  60a8              STR      r0,[r5,#8]            ;118
00007e  e0e0              B        |L3.578|
                  |L3.128|
000080  2003              MOVS     r0,#3                 ;123
000082  2105              MOVS     r1,#5                 ;123
000084  0709              LSLS     r1,r1,#28             ;123
000086  6048              STR      r0,[r1,#4]            ;123
000088  2cab              CMP      r4,#0xab              ;126
00008a  d00b              BEQ      |L3.164|
00008c  4876              LDR      r0,|L3.616|
00008e  2cac              CMP      r4,#0xac              ;130
000090  6800              LDR      r0,[r0,#0]            ;137
000092  d00c              BEQ      |L3.174|
000094  0840              LSRS     r0,r0,#1              ;137
000096  0040              LSLS     r0,r0,#1              ;137
                  |L3.152|
000098  4973              LDR      r1,|L3.616|
00009a  6008              STR      r0,[r1,#0]            ;140
00009c  4974              LDR      r1,|L3.624|
00009e  4873              LDR      r0,|L3.620|
0000a0  60c8              STR      r0,[r1,#0xc]          ;141
                  |L3.162|
0000a2  e7fe              B        |L3.162|
                  |L3.164|
0000a4  4870              LDR      r0,|L3.616|
0000a6  6800              LDR      r0,[r0,#0]            ;128
0000a8  0880              LSRS     r0,r0,#2              ;128
0000aa  0080              LSLS     r0,r0,#2              ;128
0000ac  e7f4              B        |L3.152|
                  |L3.174|
0000ae  0880              LSRS     r0,r0,#2              ;132
0000b0  0080              LSLS     r0,r0,#2              ;132
0000b2  2102              MOVS     r1,#2                 ;133
0000b4  4308              ORRS     r0,r0,r1              ;133
0000b6  e7ef              B        |L3.152|
                  |L3.184|
0000b8  486a              LDR      r0,|L3.612|
0000ba  2101              MOVS     r1,#1                 ;148
0000bc  6141              STR      r1,[r0,#0x14]         ;149  ; g_packno
0000be  e0c0              B        |L3.578|
                  |L3.192|
0000c0  2000              MOVS     r0,#0                 ;153
;;;169        {
;;;170            //return 1: APROM, 2: LDROM
;;;171            outpw(response + 8, (FMC->ISPCON & 0x2) ? 2 : 1);
;;;172        }
;;;173    
;;;174        if ((lcmd == CMD_UPDATE_APROM) || (lcmd == CMD_UPDATE_DATAFLASH))
;;;175        {
;;;176            if (lcmd == CMD_UPDATE_DATAFLASH)
;;;177            {
;;;178                StartAddress = g_dataFlashAddr;
;;;179    
;;;180                if (g_dataFlashSize)   //g_dataFlashAddr
;;;181                {
;;;182                    EraseAP(g_dataFlashAddr, g_dataFlashAddr + g_dataFlashSize);
;;;183                }
;;;184                else
;;;185                {
;;;186                    goto out;
;;;187                }
;;;188            }
;;;189            else
;;;190            {
;;;191                StartAddress = 0;
;;;192            }
;;;193    
;;;194            //StartAddress = inpw(pSrc);
;;;195            TotalLen = inpw(pSrc + 4);
;;;196            pSrc += 8;
;;;197            srclen -= 8;
;;;198            StartAddress_bak = StartAddress;
;;;199            TotalLen_bak = TotalLen;
;;;200        }
;;;201        else if (lcmd == CMD_UPDATE_CONFIG)
;;;202        {
;;;203            if ((security == 0) && (!bUpdateApromCmd))   //security lock
;;;204            {
;;;205                goto out;
;;;206            }
;;;207    
;;;208            UpdateConfig((uint32_t *)(pSrc), (uint32_t *)(response + 8));
;;;209            GetDataFlashInfo(&g_dataFlashAddr, &g_dataFlashSize);
;;;210            goto out;
;;;211        }
;;;212        else if (lcmd == CMD_RESEND_PACKET)     //for APROM&Data flash only
;;;213        {
;;;214            StartAddress -= LastDataLen;
;;;215            TotalLen += LastDataLen;
;;;216    
;;;217            if ((StartAddress & 0xFFE00) >= Config0)
;;;218            {
;;;219                goto out;
;;;220            }
;;;221    
;;;222            ReadData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;223            FMC_Erase_User(StartAddress & 0xFFE00);
;;;224            WriteData(StartAddress & 0xFFE00, StartAddress, (uint32_t *)aprom_buf);
;;;225    
;;;226            if ((StartAddress % FMC_FLASH_PAGE_SIZE) >= (FMC_FLASH_PAGE_SIZE - LastDataLen))
;;;227            {
;;;228                FMC_Erase_User((StartAddress & 0xFFE00) + FMC_FLASH_PAGE_SIZE);
;;;229            }
;;;230    
;;;231            goto out;
;;;232        }
;;;233    
;;;234        if ((gcmd == CMD_UPDATE_APROM) || (gcmd == CMD_UPDATE_DATAFLASH))
;;;235        {
;;;236            if (TotalLen < srclen)
;;;237            {
;;;238                srclen = TotalLen;//prevent last package from over writing
;;;239            }
;;;240    
;;;241            TotalLen -= srclen;
;;;242            WriteData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc); //WriteData(StartAddress, StartAddress + srclen, (uint32_t*)pSrc);
;;;243            memset(pSrc, 0, srclen);
;;;244            ReadData(StartAddress, StartAddress + srclen, (uint32_t *)pSrc);
;;;245            StartAddress += srclen;
;;;246            LastDataLen =  srclen;
;;;247    
;;;248            if (TotalLen == 0)
;;;249            {
;;;250                lcksum = CalCheckSum(StartAddress_bak, TotalLen_bak);
;;;251                outps(response + 8, lcksum);
;;;252            }
;;;253        }
;;;254    
;;;255    out:
;;;256        lcksum = Checksum(buffer, len);
;;;257        outps(response, lcksum);
;;;258        ++g_packno;
;;;259        outpw(response + 4, g_packno);
;;;260        g_packno++;
;;;261        return 0;
;;;262    }
0000c2  b005              ADD      sp,sp,#0x14
0000c4  bdf0              POP      {r4-r7,pc}
                  |L3.198|
0000c6  4867              LDR      r0,|L3.612|
0000c8  6a01              LDR      r1,[r0,#0x20]         ;157  ; g_apromSize
0000ca  6a40              LDR      r0,[r0,#0x24]         ;157  ; g_dataFlashAddr
0000cc  4281              CMP      r1,r0                 ;157
0000ce  d300              BCC      |L3.210|
0000d0  4601              MOV      r1,r0                 ;157
                  |L3.210|
0000d2  2000              MOVS     r0,#0                 ;157
0000d4  f7fffffe          BL       EraseAP
0000d8  2ca3              CMP      r4,#0xa3              ;159
0000da  d10d              BNE      |L3.248|
0000dc  4961              LDR      r1,|L3.612|
0000de  6a48              LDR      r0,[r1,#0x24]         ;161  ; g_dataFlashAddr
0000e0  6a89              LDR      r1,[r1,#0x28]         ;161  ; g_dataFlashSize
0000e2  1841              ADDS     r1,r0,r1              ;161
0000e4  f7fffffe          BL       EraseAP
0000e8  9801              LDR      r0,[sp,#4]            ;162
0000ea  2102              MOVS     r1,#2                 ;162
0000ec  4308              ORRS     r0,r0,r1              ;162
0000ee  60a8              STR      r0,[r5,#8]            ;163
0000f0  2100              MOVS     r1,#0                 ;163
0000f2  9800              LDR      r0,[sp,#0]            ;163
0000f4  f7fffffe          BL       UpdateConfig
                  |L3.248|
0000f8  485a              LDR      r0,|L3.612|
0000fa  2101              MOVS     r1,#1                 ;166
0000fc  61c1              STR      r1,[r0,#0x1c]         ;166  ; bUpdateApromCmd
                  |L3.254|
0000fe  2ca0              CMP      r4,#0xa0              ;174
000100  d01a              BEQ      |L3.312|
000102  2cc3              CMP      r4,#0xc3              ;174
000104  d00e              BEQ      |L3.292|
000106  2ca1              CMP      r4,#0xa1              ;201
000108  d028              BEQ      |L3.348|
00010a  2cff              CMP      r4,#0xff              ;212
00010c  d035              BEQ      |L3.378|
00010e  e01e              B        |L3.334|
                  |L3.272|
000110  4855              LDR      r0,|L3.616|
000112  6800              LDR      r0,[r0,#0]            ;171
000114  0780              LSLS     r0,r0,#30             ;171
000116  d502              BPL      |L3.286|
000118  2002              MOVS     r0,#2                 ;171
00011a  e001              B        |L3.288|
                  |L3.284|
00011c  e02d              B        |L3.378|
                  |L3.286|
00011e  2001              MOVS     r0,#1                 ;171
                  |L3.288|
000120  60a8              STR      r0,[r5,#8]            ;171
000122  e014              B        |L3.334|
                  |L3.292|
000124  494f              LDR      r1,|L3.612|
000126  6a48              LDR      r0,[r1,#0x24]         ;178  ; g_dataFlashAddr
000128  6008              STR      r0,[r1,#0]            ;180  ; StartAddress
00012a  6a89              LDR      r1,[r1,#0x28]         ;180  ; g_dataFlashSize
00012c  2900              CMP      r1,#0                 ;180
00012e  d014              BEQ      |L3.346|
000130  1841              ADDS     r1,r0,r1              ;182
000132  f7fffffe          BL       EraseAP
000136  e002              B        |L3.318|
                  |L3.312|
000138  494a              LDR      r1,|L3.612|
00013a  2000              MOVS     r0,#0                 ;191
00013c  6008              STR      r0,[r1,#0]            ;191  ; StartAddress
                  |L3.318|
00013e  6878              LDR      r0,[r7,#4]            ;195
000140  4948              LDR      r1,|L3.612|
000142  3e08              SUBS     r6,r6,#8              ;199
000144  6088              STR      r0,[r1,#8]            ;198  ; TotalLen
000146  680a              LDR      r2,[r1,#0]            ;198  ; StartAddress
000148  604a              STR      r2,[r1,#4]            ;199  ; StartAddress_bak
00014a  3708              ADDS     r7,r7,#8              ;199
00014c  60c8              STR      r0,[r1,#0xc]          ;199  ; TotalLen_bak
                  |L3.334|
00014e  4c45              LDR      r4,|L3.612|
000150  69a0              LDR      r0,[r4,#0x18]         ;234  ; gcmd
000152  28a0              CMP      r0,#0xa0              ;234
000154  d039              BEQ      |L3.458|
000156  28c3              CMP      r0,#0xc3              ;234
000158  d037              BEQ      |L3.458|
                  |L3.346|
00015a  e072              B        |L3.578|
                  |L3.348|
00015c  4941              LDR      r1,|L3.612|
00015e  9802              LDR      r0,[sp,#8]            ;203
000160  69c9              LDR      r1,[r1,#0x1c]         ;203  ; bUpdateApromCmd
000162  4308              ORRS     r0,r0,r1              ;203
000164  d06d              BEQ      |L3.578|
000166  4638              MOV      r0,r7                 ;208
000168  9900              LDR      r1,[sp,#0]            ;208
00016a  f7fffffe          BL       UpdateConfig
00016e  493d              LDR      r1,|L3.612|
000170  3128              ADDS     r1,r1,#0x28           ;209
000172  1f08              SUBS     r0,r1,#4              ;209
000174  f7fffffe          BL       GetDataFlashInfo
000178  e063              B        |L3.578|
                  |L3.378|
00017a  4c3a              LDR      r4,|L3.612|
00017c  4e3d              LDR      r6,|L3.628|
00017e  6821              LDR      r1,[r4,#0]            ;214  ; StartAddress
000180  6920              LDR      r0,[r4,#0x10]         ;214  ; LastDataLen
000182  1a09              SUBS     r1,r1,r0              ;214
000184  6021              STR      r1,[r4,#0]            ;215  ; StartAddress
000186  68a2              LDR      r2,[r4,#8]            ;215  ; TotalLen
000188  1810              ADDS     r0,r2,r0              ;215
00018a  60a0              STR      r0,[r4,#8]            ;222  ; TotalLen
00018c  4a33              LDR      r2,|L3.604|
00018e  4608              MOV      r0,r1                 ;222
000190  4030              ANDS     r0,r0,r6              ;222
000192  3240              ADDS     r2,r2,#0x40           ;222
000194  f7fffffe          BL       ReadData
000198  6820              LDR      r0,[r4,#0]            ;223  ; StartAddress
00019a  4030              ANDS     r0,r0,r6              ;223
00019c  f7fffffe          BL       FMC_Erase_User
0001a0  6820              LDR      r0,[r4,#0]            ;224  ; StartAddress
0001a2  4a2e              LDR      r2,|L3.604|
0001a4  4601              MOV      r1,r0                 ;224
0001a6  4030              ANDS     r0,r0,r6              ;224
0001a8  3240              ADDS     r2,r2,#0x40           ;224
0001aa  f7fffffe          BL       WriteData
0001ae  6820              LDR      r0,[r4,#0]            ;226  ; StartAddress
0001b0  2301              MOVS     r3,#1                 ;226
0001b2  6922              LDR      r2,[r4,#0x10]         ;226  ; LastDataLen
0001b4  05c1              LSLS     r1,r0,#23             ;226
0001b6  025b              LSLS     r3,r3,#9              ;226
0001b8  0dc9              LSRS     r1,r1,#23             ;226
0001ba  1a9a              SUBS     r2,r3,r2              ;226
0001bc  4291              CMP      r1,r2                 ;226
0001be  d340              BCC      |L3.578|
0001c0  4030              ANDS     r0,r0,r6              ;228
0001c2  18c0              ADDS     r0,r0,r3              ;228
0001c4  f7fffffe          BL       FMC_Erase_User
0001c8  e03b              B        |L3.578|
                  |L3.458|
0001ca  68a0              LDR      r0,[r4,#8]            ;236  ; TotalLen
0001cc  42b0              CMP      r0,r6                 ;236
0001ce  d200              BCS      |L3.466|
0001d0  4606              MOV      r6,r0                 ;238
                  |L3.466|
0001d2  1b80              SUBS     r0,r0,r6              ;241
0001d4  60a0              STR      r0,[r4,#8]            ;242  ; TotalLen
0001d6  6820              LDR      r0,[r4,#0]            ;242  ; StartAddress
0001d8  463a              MOV      r2,r7                 ;242
0001da  1981              ADDS     r1,r0,r6              ;242
0001dc  f7fffffe          BL       WriteData
0001e0  4631              MOV      r1,r6                 ;243
0001e2  4638              MOV      r0,r7                 ;243
0001e4  f7fffffe          BL       __aeabi_memclr
0001e8  6820              LDR      r0,[r4,#0]            ;244  ; StartAddress
0001ea  463a              MOV      r2,r7                 ;244
0001ec  1981              ADDS     r1,r0,r6              ;244
0001ee  f7fffffe          BL       ReadData
0001f2  6820              LDR      r0,[r4,#0]            ;245  ; StartAddress
0001f4  6126              STR      r6,[r4,#0x10]         ;248  ; LastDataLen
0001f6  1980              ADDS     r0,r0,r6              ;245
0001f8  6020              STR      r0,[r4,#0]            ;248  ; StartAddress
0001fa  68a0              LDR      r0,[r4,#8]            ;248  ; TotalLen
0001fc  2800              CMP      r0,#0                 ;248
0001fe  d120              BNE      |L3.578|
000200  6860              LDR      r0,[r4,#4]            ;250  ; StartAddress_bak
000202  9000              STR      r0,[sp,#0]            ;250
000204  2600              MOVS     r6,#0                 ;250
000206  68e7              LDR      r7,[r4,#0xc]          ;250  ; TotalLen_bak
000208  4634              MOV      r4,r6                 ;250
00020a  e017              B        |L3.572|
                  |L3.524|
00020c  9800              LDR      r0,[sp,#0]            ;250
00020e  4a13              LDR      r2,|L3.604|
000210  1900              ADDS     r0,r0,r4              ;250
000212  1dc1              ADDS     r1,r0,#7              ;250
000214  31ff              ADDS     r1,r1,#0xff           ;250
000216  31fa              ADDS     r1,r1,#0xfa           ;250
000218  3240              ADDS     r2,r2,#0x40           ;250
00021a  f7fffffe          BL       ReadData
00021e  2101              MOVS     r1,#1                 ;250
000220  1b38              SUBS     r0,r7,r4              ;250
000222  0249              LSLS     r1,r1,#9              ;250
000224  4288              CMP      r0,r1                 ;250
000226  d200              BCS      |L3.554|
000228  4601              MOV      r1,r0                 ;250
                  |L3.554|
00022a  480c              LDR      r0,|L3.604|
00022c  3040              ADDS     r0,r0,#0x40           ;250
00022e  f7fffffe          BL       Checksum
000232  1980              ADDS     r0,r0,r6              ;250
000234  34ff              ADDS     r4,r4,#0xff           ;250
000236  34ff              ADDS     r4,r4,#0xff           ;250
000238  b286              UXTH     r6,r0                 ;250
00023a  3402              ADDS     r4,#2                 ;250
                  |L3.572|
00023c  42bc              CMP      r4,r7                 ;250
00023e  d3e5              BCC      |L3.524|
000240  812e              STRH     r6,[r5,#8]            ;251
                  |L3.578|
000242  9904              LDR      r1,[sp,#0x10]         ;256
000244  9803              LDR      r0,[sp,#0xc]          ;256
000246  f7fffffe          BL       Checksum
00024a  8028              STRH     r0,[r5,#0]            ;257
00024c  4905              LDR      r1,|L3.612|
00024e  6948              LDR      r0,[r1,#0x14]         ;258  ; g_packno
000250  1c40              ADDS     r0,r0,#1              ;258
000252  6068              STR      r0,[r5,#4]            ;259
000254  1c40              ADDS     r0,r0,#1              ;259
000256  6148              STR      r0,[r1,#0x14]         ;261  ; g_packno
000258  e732              B        |L3.192|
;;;263    
                          ENDP

00025a  0000              DCW      0x0000
                  |L3.604|
                          DCD      ||.bss||
                  |L3.608|
                          DCD      0x00300008
                  |L3.612|
                          DCD      ||.data||
                  |L3.616|
                          DCD      0x5000c000
                  |L3.620|
                          DCD      0x05fa0004
                  |L3.624|
                          DCD      0xe000ed00
                  |L3.628|
                          DCD      0x000ffe00

                          AREA ||i.UpdateConfig||, CODE, READONLY, ALIGN=2

                  UpdateConfig PROC
;;;66     
;;;67     void UpdateConfig(unsigned int *data, unsigned int *res)
000000  b5f8              PUSH     {r3-r7,lr}
;;;68     {
;;;69         FMC_ENABLE_CFG_UPDATE();
000002  4e10              LDR      r6,|L4.68|
000004  4605              MOV      r5,r0                 ;68
000006  6830              LDR      r0,[r6,#0]
000008  460c              MOV      r4,r1                 ;68
00000a  2710              MOVS     r7,#0x10
00000c  4338              ORRS     r0,r0,r7
00000e  6030              STR      r0,[r6,#0]
;;;70         FMC_Erase_User(Config0);
000010  01b0              LSLS     r0,r6,#6
000012  f7fffffe          BL       FMC_Erase_User
;;;71         FMC_Write_User(Config0, *data);
000016  01b0              LSLS     r0,r6,#6
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write_User
;;;72         FMC_Write_User(Config1, *(data + 1));
00001e  6869              LDR      r1,[r5,#4]
000020  4d09              LDR      r5,|L4.72|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       FMC_Write_User
;;;73     
;;;74         if (res)
000028  2c00              CMP      r4,#0
00002a  d007              BEQ      |L4.60|
;;;75         {
;;;76             FMC_Read_User(Config0, res);
00002c  4621              MOV      r1,r4
00002e  1f28              SUBS     r0,r5,#4
000030  f7fffffe          BL       FMC_Read_User
;;;77             FMC_Read_User(Config1, res + 1);
000034  1d21              ADDS     r1,r4,#4
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       FMC_Read_User
                  |L4.60|
;;;78         }
;;;79     
;;;80         FMC_DISABLE_CFG_UPDATE();
00003c  6830              LDR      r0,[r6,#0]
00003e  43b8              BICS     r0,r0,r7
000040  6030              STR      r0,[r6,#0]
;;;81     }
000042  bdf8              POP      {r3-r7,pc}
;;;82     
                          ENDP

                  |L4.68|
                          DCD      0x5000c000
                  |L4.72|
                          DCD      0x00300004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  response_buff
                          %        64
                  aprom_buf
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  StartAddress
                          DCD      0x00000000
                  StartAddress_bak
                          DCD      0x00000000
                  TotalLen
                          DCD      0x00000000
                  TotalLen_bak
                          DCD      0x00000000
                  LastDataLen
                          DCD      0x00000000
                  g_packno
                          DCD      0x00000001
                  gcmd
                          DCD      0x00000000
                  bUpdateApromCmd
                          DCD      0x00000000
                  g_apromSize
                          DCD      0x00000000
                  g_dataFlashAddr
                          DCD      0x00000000
                  g_dataFlashSize
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\ISP_USER.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REV16|
#line 388 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_ISP_USER_c_EraseAP____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ISP_USER_c_EraseAP____REVSH|
#line 402
|__asm___10_ISP_USER_c_EraseAP____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
